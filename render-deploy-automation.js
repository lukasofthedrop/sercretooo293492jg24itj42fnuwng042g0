const { chromium } = require('playwright');

(async () => {
    console.log('üöÄ Iniciando automa√ß√£o de deploy no Render...');
    
    // Iniciar navegador
    const browser = await chromium.launch({ 
        headless: false, // Mudar para true se quiser modo headless
        slowMo: 1000 // Reduzir velocidade para visualiza√ß√£o
    });
    
    const context = await browser.newContext({
        viewport: { width: 1920, height: 1080 }
    });
    
    const page = await context.newPage();
    
    try {
        console.log('üìÇ Navegando para dashboard do Render...');
        await page.goto('https://dashboard.render.com');
        
        // Esperar carregar a p√°gina
        await page.waitForLoadState('networkidle');
        console.log('‚úÖ P√°gina do Render carregada');
        
        // Verificar se j√° est√° logado ou precisa fazer login
        const loginButton = await page.$('text=Login with GitHub');
        if (loginButton) {
            console.log('üîê Precisa fazer login com GitHub...');
            await loginButton.click();
            
            // Esperar p√°gina de login do GitHub
            await page.waitForURL('https://github.com/login');
            console.log('‚úÖ P√°gina de login do GitHub carregada');
            
            // Preencher credenciais
            await page.fill('input[name="login"]', 'rk.impulsodigital@gmail.com');
            await page.fill('input[name="password"]', process.env.GITHUB_PASSWORD || 'SUA_SENHA_AQUI');
            
            // Fazer login
            await page.click('input[name="commit"]');
            
            // Esperar redirecionamento de volta ao Render
            await page.waitForURL('https://dashboard.render.com');
            console.log('‚úÖ Login realizado com sucesso!');
        } else {
            console.log('‚úÖ J√° est√° logado no Render');
        }
        
        // Esperar dashboard carregar completamente
        await page.waitForLoadState('networkidle');
        
        console.log('‚ûï Criando novo Web Service...');
        
        // Clicar no bot√£o "New +"
        await page.click('[aria-label="New"]'); // ou outro seletor apropriado
        
        // Esperar menu dropdown
        await page.waitForTimeout(2000);
        
        // Clicar em "Web Service"
        await page.click('text=Web Service');
        
        console.log('üìö Aguardando p√°gina de criar servi√ßo...');
        
        // Esperar p√°gina de cria√ß√£o de servi√ßo
        await page.waitForURL(/\/new/);
        await page.waitForLoadState('networkidle');
        
        console.log('üîó Conectando ao reposit√≥rio...');
        
        // Procurar e selecionar o reposit√≥rio correto
        await page.fill('input[placeholder*="Search"]', 'lukasofthedrop/sercretooo293492jg24itj42fnuwng042g0');
        await page.waitForTimeout(2000);
        
        // Clicar no reposit√≥rio correto
        await page.click('text=lukasofthedrop/sercretooo293492jg24itj42fnuwng042g0.git');
        
        console.log('üåø Selecionando branch render-clean...');
        
        // Esperar a se√ß√£o de branch
        await page.waitForSelector('select[name="branch"]');
        await page.selectOption('select[name="branch"]', 'render-clean');
        
        console.log('‚è≥ Aguardando detec√ß√£o do render.yaml...');
        
        // Esperar o Render detectar a configura√ß√£o automaticamente
        await page.waitForSelector('text=render.yaml detected', { timeout: 30000 });
        console.log('‚úÖ render.yaml detectado automaticamente!');
        
        console.log('üöÄ Criando Web Service...');
        
        // Clicar em "Create Web Service"
        await page.click('button:has-text("Create Web Service")');
        
        console.log('üìä Aguardando in√≠cio do deploy...');
        
        // Esperar redirecionamento para a p√°gina do servi√ßo
        await page.waitForURL(/\/services\/.+/);
        await page.waitForLoadState('networkidle');
        
        console.log('üîç Monitorando status do deploy...');
        
        // Monitorar o status do deploy
        let deployStatus = '';
        let attempts = 0;
        const maxAttempts = 60; // 10 minutos m√°ximo
        
        while (attempts < maxAttempts) {
            attempts++;
            
            // Recarregar a p√°gina para obter status atualizado
            await page.reload();
            await page.waitForLoadState('networkidle');
            
            // Verificar status do deploy
            const statusElement = await page.$('[data-testid="deploy-status"], .deploy-status, text=Live, text=Building, text=Failed');
            if (statusElement) {
                deployStatus = await statusElement.textContent();
                console.log(`üìà Status do deploy: ${deployStatus}`);
            }
            
            // Verificar se o deploy foi conclu√≠do com sucesso
            if (deployStatus && deployStatus.includes('Live')) {
                console.log('üéâ DEPLOY CONCLU√çDO COM SUCESSO!');
                console.log('‚úÖ Sistema LucrativaBet est√° ONLINE no Render!');
                break;
            }
            
            // Verificar se houve falha
            if (deployStatus && deployStatus.includes('Failed')) {
                console.log('‚ùå DEPLOY FALHOU!');
                console.log('üîç Verificando logs de erro...');
                
                // Tentar encontrar e mostrar logs de erro
                try {
                    await page.click('text=Logs');
                    await page.waitForLoadState('networkidle');
                    const logs = await page.textContent('.logs-container, pre, code');
                    console.log('üìù Logs de erro:', logs);
                } catch (e) {
                    console.log('N√£o foi poss√≠vel obter os logs automaticamente');
                }
                break;
            }
            
            // Esperar 10 segundos antes da pr√≥xima verifica√ß√£o
            await page.waitForTimeout(10000);
        }
        
        if (attempts >= maxAttempts) {
            console.log('‚è∞ Tempo limite excedido monitorando o deploy');
            console.log('üîç Por favor, verifique manualmente o status no dashboard do Render');
        }
        
        // Capturar screenshot final
        await page.screenshot({ path: '/Users/rkripto/Downloads/lucrativabet/deploy-final-status.png' });
        console.log('üì∏ Screenshot final salvo');
        
    } catch (error) {
        console.error('‚ùå ERRO durante o deploy:', error);
        
        // Capturar screenshot do erro
        await page.screenshot({ path: '/Users/rkripto/Downloads/lucrativabet/deploy-error.png' });
        console.log('üì∏ Screenshot de erro salvo');
        
    } finally {
        // Fechar navegador
        await browser.close();
        console.log('üîö Navegador fechado');
    }
})();